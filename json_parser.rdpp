#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#include "abd/printf.h"
#include "abjson/json_lex.h"
#include "abjson/json_parser.tokens.h"
#include "abjson/json_parser.h"

//#define DDEBUG 1

// See grammar.txt

//ParserName FirstSymbol LexName
//ParserNodeType

//void JsonParserTypeDeallocator(JsonParserType *node)
//{
//}

%%JsonParser json json_lex
union {
	struct {
		char		*key;
		AData	element;
	} pair;
	AData	value;
	double		number;
	char		*str;
}
%%

json:
	element {
		result.value = terms[0].value;
	}
	;

element:
	value {
		result.value = terms[0].value;
	}
	;

value:
	object {
		result.value = terms[0].value;
		aDataInvert(result.value);
	}
	| array {
		result.value = terms[0].value;
		aDataInvert(result.value);
	}
	| STRING {
		result.value = CNew(AData);
		aDataAssign(result.value, ADATA_STRING, terms[0].str);
		free(terms[0].str);
	}
	| number {
		result.value = CNew(AData);
		aDataAssign(result.value, ADATA_NUMBER, &terms[0].number);
	}
	| JSONTRUE {
		result.value = CNew(AData);
		int bool = 1;
		aDataAssign(result.value, ADATA_BOOLEAN, &bool);
	}
	| JSONFALSE {
		result.value = CNew(AData);
		int bool = 0;
		aDataAssign(result.value, ADATA_BOOLEAN, &bool);
	}
	| JSONNULL {
		result.value = CNew(AData);
	}
	;

object:
	LBRACE objectlist {
		result.value = terms[1].value;
	}
	;

objectlist:
	RBRACE {
		result.value = CNew(AData);
		aDataAssign(result.value, ADATA_OBJECT, NULL);
	}
	| members RBRACE {
		result.value = terms[0].value;
	}
	;

member:
	STRING COLON element {
		result.pair.key = terms[0].str;
		result.pair.element = terms[2].value;
	}
	;

members:
	member members_l {
		result.value = terms[1].value;
		aDataSet_k(result.value, terms[0].pair.key, terms[0].pair.element);
		if(terms[0].pair.key) free(terms[0].pair.key);
	}
	;

members_l:
	COMMA member members_l {
		result.value = terms[2].value;
		aDataSet_k(result.value, terms[1].pair.key, terms[1].pair.element);
		if(terms[1].pair.key) free(terms[1].pair.key);
	}
	| {
		result.value = CNew(AData);
		aDataAssign(result.value, ADATA_OBJECT, NULL);
	}
	;

array:
	LBRACKET arraylist {
		result.value = terms[1].value;
	}
	;

arraylist:
	RBRACKET {
		result.value = CNew(AData);
		aDataAssign(result.value, ADATA_ARRAY, NULL);
	}
	| elements RBRACKET {
		result.value = terms[0].value;
	}
	;

elements:
	element elements_l {
		result.value = terms[1].value;
		aDataAdd_i(result.value, terms[0].value);
	}
	;

elements_l:
	COMMA element elements_l {
		result.value = terms[2].value;
		aDataAdd_i(result.value, terms[1].value);
	}
	| {
		result.value = CNew(AData);
		aDataAssign(result.value, ADATA_ARRAY, NULL);
	}
	;

number:
	INTEGER floatpart
		{ 
			char tmp[256];
			if(terms[1].str == NULL){
				snprintf(tmp, 256, "%s", terms[0].str);
				free(terms[0].str);
			}else{
				snprintf(tmp, 256, "%s.%s", terms[0].str, terms[1].str);
				free(terms[0].str);
				free(terms[1].str);
			}
			result.number = atof(tmp);
		}
	;

floatpart:
	FRACTION expoent
		{ 
			char tmp[256];
			if(terms[1].str){
				snprintf(tmp, 256, "%sE%s", terms[0].str, terms[1].str);
			}else{
				snprintf(tmp, 256, "%s", terms[0].str);
			}
			if(terms[0].str) free(terms[0].str);
			if(terms[1].str) free(terms[1].str);
			result.str = strdup(tmp);
		}
	| {
			result.str = NULL;
		}
	;

expoent:
	EXPOENT {
		result.str = terms[0].str;
	}
	| {
		result.str = NULL;
	}
	;

